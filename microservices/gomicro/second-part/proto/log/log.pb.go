// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log/log.proto

package log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogEvt struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEvt) Reset()         { *m = LogEvt{} }
func (m *LogEvt) String() string { return proto.CompactTextString(m) }
func (*LogEvt) ProtoMessage()    {}
func (*LogEvt) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0d72543c57a28, []int{0}
}

func (m *LogEvt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEvt.Unmarshal(m, b)
}
func (m *LogEvt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEvt.Marshal(b, m, deterministic)
}
func (m *LogEvt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEvt.Merge(m, src)
}
func (m *LogEvt) XXX_Size() int {
	return xxx_messageInfo_LogEvt.Size(m)
}
func (m *LogEvt) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEvt.DiscardUnknown(m)
}

var xxx_messageInfo_LogEvt proto.InternalMessageInfo

func (m *LogEvt) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*LogEvt)(nil), "LogEvt")
}

func init() { proto.RegisterFile("log/log.proto", fileDescriptor_41e0d72543c57a28) }

var fileDescriptor_41e0d72543c57a28 = []byte{
	// 70 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xc9, 0x4f, 0xd7,
	0xcf, 0xc9, 0x4f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe2, 0x62, 0xf3, 0xc9, 0x4f,
	0x77, 0x2d, 0x2b, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0x31, 0x93, 0xd8, 0xc0, 0x4a, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0x68,
	0x66, 0x5e, 0x33, 0x00, 0x00, 0x00,
}
